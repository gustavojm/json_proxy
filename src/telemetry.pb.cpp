// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry.proto

#include telemetry.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace telemetry_proto {

inline constexpr Temps::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Temps::Temps(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TempsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TempsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TempsDefaultTypeInternal() {}
  union {
    Temps _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TempsDefaultTypeInternal _Temps_default_instance_;

inline constexpr Point3D::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Point3D::Point3D(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Point3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Point3DDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Point3DDefaultTypeInternal() {}
  union {
    Point3D _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Point3DDefaultTypeInternal _Point3D_default_instance_;

inline constexpr Limits::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : left_{false},
        right_{false},
        up_{false},
        down_{false},
        in_{false},
        out_{false},
        probe_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Limits::Limits(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LimitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LimitsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LimitsDefaultTypeInternal() {}
  union {
    Limits _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LimitsDefaultTypeInternal _Limits_default_instance_;

inline constexpr IndividualAxes::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{false},
        y_{false},
        z_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR IndividualAxes::IndividualAxes(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct IndividualAxesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndividualAxesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndividualAxesDefaultTypeInternal() {}
  union {
    IndividualAxes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndividualAxesDefaultTypeInternal _IndividualAxes_default_instance_;

inline constexpr CompoundAxes::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_y_{false},
        z_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CompoundAxes::CompoundAxes(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CompoundAxesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompoundAxesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompoundAxesDefaultTypeInternal() {}
  union {
    CompoundAxes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompoundAxesDefaultTypeInternal _CompoundAxes_default_instance_;

inline constexpr Telemetry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        coords_{nullptr},
        targets_{nullptr},
        on_condition_{nullptr},
        probe_{nullptr},
        stalled_{nullptr},
        limits_{nullptr},
        temps_{nullptr},
        control_enabled_{false},
        stall_control_{false},
        probe_protected_{false},
        brakes_mode_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Telemetry::Telemetry(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TelemetryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TelemetryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TelemetryDefaultTypeInternal() {}
  union {
    Telemetry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TelemetryDefaultTypeInternal _Telemetry_default_instance_;
}  // namespace telemetry_proto
static ::_pb::Metadata file_level_metadata_telemetry_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_telemetry_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_telemetry_2eproto = nullptr;
const ::uint32_t TableStruct_telemetry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Point3D, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Point3D, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Point3D, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Point3D, _impl_.z_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Temps, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Temps, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Temps, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Temps, _impl_.z_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::IndividualAxes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::IndividualAxes, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::IndividualAxes, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::IndividualAxes, _impl_.z_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Limits, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Limits, _impl_.left_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Limits, _impl_.right_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Limits, _impl_.up_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Limits, _impl_.down_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Limits, _impl_.in_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Limits, _impl_.out_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Limits, _impl_.probe_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::CompoundAxes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::CompoundAxes, _impl_.x_y_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::CompoundAxes, _impl_.z_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Telemetry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Telemetry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Telemetry, _impl_.coords_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Telemetry, _impl_.targets_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Telemetry, _impl_.on_condition_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Telemetry, _impl_.probe_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Telemetry, _impl_.stalled_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Telemetry, _impl_.limits_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Telemetry, _impl_.control_enabled_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Telemetry, _impl_.stall_control_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Telemetry, _impl_.brakes_mode_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Telemetry, _impl_.probe_protected_),
    PROTOBUF_FIELD_OFFSET(::telemetry_proto::Telemetry, _impl_.temps_),
    0,
    1,
    2,
    3,
    4,
    5,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    6,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::telemetry_proto::Point3D)},
        {11, -1, -1, sizeof(::telemetry_proto::Temps)},
        {22, -1, -1, sizeof(::telemetry_proto::IndividualAxes)},
        {33, -1, -1, sizeof(::telemetry_proto::Limits)},
        {48, -1, -1, sizeof(::telemetry_proto::CompoundAxes)},
        {58, 77, -1, sizeof(::telemetry_proto::Telemetry)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::telemetry_proto::_Point3D_default_instance_._instance,
    &::telemetry_proto::_Temps_default_instance_._instance,
    &::telemetry_proto::_IndividualAxes_default_instance_._instance,
    &::telemetry_proto::_Limits_default_instance_._instance,
    &::telemetry_proto::_CompoundAxes_default_instance_._instance,
    &::telemetry_proto::_Telemetry_default_instance_._instance,
};
const char descriptor_table_protodef_telemetry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\017telemetry.proto\022\017telemetry_proto\"*\n\007Po"
    "int3D\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"("
    "\n\005Temps\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001"
    "\"1\n\016IndividualAxes\022\t\n\001x\030\001 \001(\010\022\t\n\001y\030\002 \001(\010"
    "\022\t\n\001z\030\003 \001(\010\"g\n\006Limits\022\014\n\004left\030\001 \001(\010\022\r\n\005r"
    "ight\030\002 \001(\010\022\n\n\002up\030\003 \001(\010\022\014\n\004down\030\004 \001(\010\022\n\n\002"
    "in\030\005 \001(\010\022\013\n\003out\030\006 \001(\010\022\r\n\005probe\030\007 \001(\010\"&\n\014"
    "CompoundAxes\022\013\n\003x_y\030\001 \001(\010\022\t\n\001z\030\002 \001(\010\"\243\003\n"
    "\tTelemetry\022(\n\006coords\030\001 \001(\0132\030.telemetry_p"
    "roto.Point3D\022)\n\007targets\030\002 \001(\0132\030.telemetr"
    "y_proto.Point3D\0223\n\014on_condition\030\003 \001(\0132\035."
    "telemetry_proto.CompoundAxes\022,\n\005probe\030\004 "
    "\001(\0132\035.telemetry_proto.CompoundAxes\0220\n\007st"
    "alled\030\005 \001(\0132\037.telemetry_proto.Individual"
    "Axes\022\'\n\006limits\030\006 \001(\0132\027.telemetry_proto.L"
    "imits\022\027\n\017control_enabled\030\007 \001(\010\022\025\n\rstall_"
    "control\030\010 \001(\010\022\023\n\013brakes_mode\030\t \001(\005\022\027\n\017pr"
    "obe_protected\030\n \001(\010\022%\n\005temps\030\013 \001(\0132\026.tel"
    "emetry_proto.Tempsb\006proto3"
};
static ::absl::once_flag descriptor_table_telemetry_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_telemetry_2eproto = {
    false,
    false,
    746,
    descriptor_table_protodef_telemetry_2eproto,
    "telemetry.proto",
    &descriptor_table_telemetry_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_telemetry_2eproto::offsets,
    file_level_metadata_telemetry_2eproto,
    file_level_enum_descriptors_telemetry_2eproto,
    file_level_service_descriptors_telemetry_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_telemetry_2eproto_getter() {
  return &descriptor_table_telemetry_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_telemetry_2eproto(&descriptor_table_telemetry_2eproto);
namespace telemetry_proto {
// ===================================================================

class Point3D::_Internal {
 public:
};

Point3D::Point3D(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:telemetry_proto.Point3D)
}
Point3D::Point3D(
    ::google::protobuf::Arena* arena, const Point3D& from)
    : Point3D(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Point3D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Point3D::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Point3D::~Point3D() {
  // @@protoc_insertion_point(destructor:telemetry_proto.Point3D)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Point3D::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Point3D::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_proto.Point3D)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Point3D::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Point3D::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Point3D_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Point3D, _impl_.x_)}},
    // double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Point3D, _impl_.y_)}},
    // double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Point3D, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double x = 1;
    {PROTOBUF_FIELD_OFFSET(Point3D, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double y = 2;
    {PROTOBUF_FIELD_OFFSET(Point3D, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double z = 3;
    {PROTOBUF_FIELD_OFFSET(Point3D, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Point3D::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_proto.Point3D)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_proto.Point3D)
  return target;
}

::size_t Point3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_proto.Point3D)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 9;
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 9;
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Point3D::_class_data_ = {
    Point3D::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Point3D::GetClassData() const {
  return &_class_data_;
}

void Point3D::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Point3D*>(&to_msg);
  auto& from = static_cast<const Point3D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:telemetry_proto.Point3D)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Point3D::CopyFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_proto.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Point3D::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Point3D::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Point3D::InternalSwap(Point3D* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3D, _impl_.z_)
      + sizeof(Point3D::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Point3D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Point3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[0]);
}
// ===================================================================

class Temps::_Internal {
 public:
};

Temps::Temps(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:telemetry_proto.Temps)
}
Temps::Temps(
    ::google::protobuf::Arena* arena, const Temps& from)
    : Temps(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Temps::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Temps::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Temps::~Temps() {
  // @@protoc_insertion_point(destructor:telemetry_proto.Temps)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Temps::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Temps::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_proto.Temps)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Temps::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Temps::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Temps_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double x = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Temps, _impl_.x_)}},
    // double y = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Temps, _impl_.y_)}},
    // double z = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Temps, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double x = 1;
    {PROTOBUF_FIELD_OFFSET(Temps, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double y = 2;
    {PROTOBUF_FIELD_OFFSET(Temps, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double z = 3;
    {PROTOBUF_FIELD_OFFSET(Temps, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Temps::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_proto.Temps)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_proto.Temps)
  return target;
}

::size_t Temps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_proto.Temps)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 9;
  }

  // double y = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 9;
  }

  // double z = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Temps::_class_data_ = {
    Temps::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Temps::GetClassData() const {
  return &_class_data_;
}

void Temps::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Temps*>(&to_msg);
  auto& from = static_cast<const Temps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:telemetry_proto.Temps)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  ::uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  ::uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  ::uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Temps::CopyFrom(const Temps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_proto.Temps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Temps::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Temps::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Temps::InternalSwap(Temps* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Temps, _impl_.z_)
      + sizeof(Temps::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Temps, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Temps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[1]);
}
// ===================================================================

class IndividualAxes::_Internal {
 public:
};

IndividualAxes::IndividualAxes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:telemetry_proto.IndividualAxes)
}
IndividualAxes::IndividualAxes(
    ::google::protobuf::Arena* arena, const IndividualAxes& from)
    : IndividualAxes(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE IndividualAxes::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void IndividualAxes::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
IndividualAxes::~IndividualAxes() {
  // @@protoc_insertion_point(destructor:telemetry_proto.IndividualAxes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IndividualAxes::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void IndividualAxes::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_proto.IndividualAxes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* IndividualAxes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> IndividualAxes::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_IndividualAxes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool x = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(IndividualAxes, _impl_.x_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(IndividualAxes, _impl_.x_)}},
    // bool y = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(IndividualAxes, _impl_.y_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(IndividualAxes, _impl_.y_)}},
    // bool z = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(IndividualAxes, _impl_.z_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(IndividualAxes, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool x = 1;
    {PROTOBUF_FIELD_OFFSET(IndividualAxes, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool y = 2;
    {PROTOBUF_FIELD_OFFSET(IndividualAxes, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool z = 3;
    {PROTOBUF_FIELD_OFFSET(IndividualAxes, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* IndividualAxes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_proto.IndividualAxes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_x(), target);
  }

  // bool y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_y(), target);
  }

  // bool z = 3;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_proto.IndividualAxes)
  return target;
}

::size_t IndividualAxes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_proto.IndividualAxes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool x = 1;
  if (this->_internal_x() != 0) {
    total_size += 2;
  }

  // bool y = 2;
  if (this->_internal_y() != 0) {
    total_size += 2;
  }

  // bool z = 3;
  if (this->_internal_z() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData IndividualAxes::_class_data_ = {
    IndividualAxes::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* IndividualAxes::GetClassData() const {
  return &_class_data_;
}

void IndividualAxes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<IndividualAxes*>(&to_msg);
  auto& from = static_cast<const IndividualAxes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:telemetry_proto.IndividualAxes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IndividualAxes::CopyFrom(const IndividualAxes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_proto.IndividualAxes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IndividualAxes::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* IndividualAxes::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void IndividualAxes::InternalSwap(IndividualAxes* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndividualAxes, _impl_.z_)
      + sizeof(IndividualAxes::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(IndividualAxes, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata IndividualAxes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[2]);
}
// ===================================================================

class Limits::_Internal {
 public:
};

Limits::Limits(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:telemetry_proto.Limits)
}
Limits::Limits(
    ::google::protobuf::Arena* arena, const Limits& from)
    : Limits(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Limits::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Limits::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, left_),
           0,
           offsetof(Impl_, probe_) -
               offsetof(Impl_, left_) +
               sizeof(Impl_::probe_));
}
Limits::~Limits() {
  // @@protoc_insertion_point(destructor:telemetry_proto.Limits)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Limits::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Limits::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_proto.Limits)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.left_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.probe_) -
      reinterpret_cast<char*>(&_impl_.left_)) + sizeof(_impl_.probe_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Limits::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> Limits::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Limits_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool left = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Limits, _impl_.left_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Limits, _impl_.left_)}},
    // bool right = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Limits, _impl_.right_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Limits, _impl_.right_)}},
    // bool up = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Limits, _impl_.up_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Limits, _impl_.up_)}},
    // bool down = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Limits, _impl_.down_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Limits, _impl_.down_)}},
    // bool in = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Limits, _impl_.in_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Limits, _impl_.in_)}},
    // bool out = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Limits, _impl_.out_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Limits, _impl_.out_)}},
    // bool probe = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Limits, _impl_.probe_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Limits, _impl_.probe_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool left = 1;
    {PROTOBUF_FIELD_OFFSET(Limits, _impl_.left_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool right = 2;
    {PROTOBUF_FIELD_OFFSET(Limits, _impl_.right_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool up = 3;
    {PROTOBUF_FIELD_OFFSET(Limits, _impl_.up_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool down = 4;
    {PROTOBUF_FIELD_OFFSET(Limits, _impl_.down_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool in = 5;
    {PROTOBUF_FIELD_OFFSET(Limits, _impl_.in_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool out = 6;
    {PROTOBUF_FIELD_OFFSET(Limits, _impl_.out_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool probe = 7;
    {PROTOBUF_FIELD_OFFSET(Limits, _impl_.probe_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Limits::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_proto.Limits)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool left = 1;
  if (this->_internal_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_left(), target);
  }

  // bool right = 2;
  if (this->_internal_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_right(), target);
  }

  // bool up = 3;
  if (this->_internal_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_up(), target);
  }

  // bool down = 4;
  if (this->_internal_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_down(), target);
  }

  // bool in = 5;
  if (this->_internal_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_in(), target);
  }

  // bool out = 6;
  if (this->_internal_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_out(), target);
  }

  // bool probe = 7;
  if (this->_internal_probe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_probe(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_proto.Limits)
  return target;
}

::size_t Limits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_proto.Limits)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool left = 1;
  if (this->_internal_left() != 0) {
    total_size += 2;
  }

  // bool right = 2;
  if (this->_internal_right() != 0) {
    total_size += 2;
  }

  // bool up = 3;
  if (this->_internal_up() != 0) {
    total_size += 2;
  }

  // bool down = 4;
  if (this->_internal_down() != 0) {
    total_size += 2;
  }

  // bool in = 5;
  if (this->_internal_in() != 0) {
    total_size += 2;
  }

  // bool out = 6;
  if (this->_internal_out() != 0) {
    total_size += 2;
  }

  // bool probe = 7;
  if (this->_internal_probe() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Limits::_class_data_ = {
    Limits::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Limits::GetClassData() const {
  return &_class_data_;
}

void Limits::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Limits*>(&to_msg);
  auto& from = static_cast<const Limits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:telemetry_proto.Limits)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_left() != 0) {
    _this->_internal_set_left(from._internal_left());
  }
  if (from._internal_right() != 0) {
    _this->_internal_set_right(from._internal_right());
  }
  if (from._internal_up() != 0) {
    _this->_internal_set_up(from._internal_up());
  }
  if (from._internal_down() != 0) {
    _this->_internal_set_down(from._internal_down());
  }
  if (from._internal_in() != 0) {
    _this->_internal_set_in(from._internal_in());
  }
  if (from._internal_out() != 0) {
    _this->_internal_set_out(from._internal_out());
  }
  if (from._internal_probe() != 0) {
    _this->_internal_set_probe(from._internal_probe());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Limits::CopyFrom(const Limits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_proto.Limits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Limits::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Limits::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Limits::InternalSwap(Limits* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Limits, _impl_.probe_)
      + sizeof(Limits::_impl_.probe_)
      - PROTOBUF_FIELD_OFFSET(Limits, _impl_.left_)>(
          reinterpret_cast<char*>(&_impl_.left_),
          reinterpret_cast<char*>(&other->_impl_.left_));
}

::google::protobuf::Metadata Limits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[3]);
}
// ===================================================================

class CompoundAxes::_Internal {
 public:
};

CompoundAxes::CompoundAxes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:telemetry_proto.CompoundAxes)
}
CompoundAxes::CompoundAxes(
    ::google::protobuf::Arena* arena, const CompoundAxes& from)
    : CompoundAxes(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE CompoundAxes::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CompoundAxes::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_y_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_y_) +
               sizeof(Impl_::z_));
}
CompoundAxes::~CompoundAxes() {
  // @@protoc_insertion_point(destructor:telemetry_proto.CompoundAxes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CompoundAxes::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CompoundAxes::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_proto.CompoundAxes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_y_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_y_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CompoundAxes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> CompoundAxes::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CompoundAxes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool z = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CompoundAxes, _impl_.z_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CompoundAxes, _impl_.z_)}},
    // bool x_y = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CompoundAxes, _impl_.x_y_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CompoundAxes, _impl_.x_y_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool x_y = 1;
    {PROTOBUF_FIELD_OFFSET(CompoundAxes, _impl_.x_y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool z = 2;
    {PROTOBUF_FIELD_OFFSET(CompoundAxes, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CompoundAxes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_proto.CompoundAxes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool x_y = 1;
  if (this->_internal_x_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_x_y(), target);
  }

  // bool z = 2;
  if (this->_internal_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_proto.CompoundAxes)
  return target;
}

::size_t CompoundAxes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_proto.CompoundAxes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool x_y = 1;
  if (this->_internal_x_y() != 0) {
    total_size += 2;
  }

  // bool z = 2;
  if (this->_internal_z() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CompoundAxes::_class_data_ = {
    CompoundAxes::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CompoundAxes::GetClassData() const {
  return &_class_data_;
}

void CompoundAxes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CompoundAxes*>(&to_msg);
  auto& from = static_cast<const CompoundAxes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:telemetry_proto.CompoundAxes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x_y() != 0) {
    _this->_internal_set_x_y(from._internal_x_y());
  }
  if (from._internal_z() != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CompoundAxes::CopyFrom(const CompoundAxes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_proto.CompoundAxes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CompoundAxes::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CompoundAxes::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CompoundAxes::InternalSwap(CompoundAxes* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompoundAxes, _impl_.z_)
      + sizeof(CompoundAxes::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(CompoundAxes, _impl_.x_y_)>(
          reinterpret_cast<char*>(&_impl_.x_y_),
          reinterpret_cast<char*>(&other->_impl_.x_y_));
}

::google::protobuf::Metadata CompoundAxes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[4]);
}
// ===================================================================

class Telemetry::_Internal {
 public:
  using HasBits = decltype(std::declval<Telemetry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Telemetry, _impl_._has_bits_);
  static const ::telemetry_proto::Point3D& coords(const Telemetry* msg);
  static void set_has_coords(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::telemetry_proto::Point3D& targets(const Telemetry* msg);
  static void set_has_targets(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::telemetry_proto::CompoundAxes& on_condition(const Telemetry* msg);
  static void set_has_on_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::telemetry_proto::CompoundAxes& probe(const Telemetry* msg);
  static void set_has_probe(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::telemetry_proto::IndividualAxes& stalled(const Telemetry* msg);
  static void set_has_stalled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::telemetry_proto::Limits& limits(const Telemetry* msg);
  static void set_has_limits(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::telemetry_proto::Temps& temps(const Telemetry* msg);
  static void set_has_temps(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::telemetry_proto::Point3D& Telemetry::_Internal::coords(const Telemetry* msg) {
  return *msg->_impl_.coords_;
}
const ::telemetry_proto::Point3D& Telemetry::_Internal::targets(const Telemetry* msg) {
  return *msg->_impl_.targets_;
}
const ::telemetry_proto::CompoundAxes& Telemetry::_Internal::on_condition(const Telemetry* msg) {
  return *msg->_impl_.on_condition_;
}
const ::telemetry_proto::CompoundAxes& Telemetry::_Internal::probe(const Telemetry* msg) {
  return *msg->_impl_.probe_;
}
const ::telemetry_proto::IndividualAxes& Telemetry::_Internal::stalled(const Telemetry* msg) {
  return *msg->_impl_.stalled_;
}
const ::telemetry_proto::Limits& Telemetry::_Internal::limits(const Telemetry* msg) {
  return *msg->_impl_.limits_;
}
const ::telemetry_proto::Temps& Telemetry::_Internal::temps(const Telemetry* msg) {
  return *msg->_impl_.temps_;
}
Telemetry::Telemetry(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:telemetry_proto.Telemetry)
}
inline PROTOBUF_NDEBUG_INLINE Telemetry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Telemetry::Telemetry(
    ::google::protobuf::Arena* arena,
    const Telemetry& from)
    : ::google::protobuf::Message(arena) {
  Telemetry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.coords_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::telemetry_proto::Point3D>(arena, *from._impl_.coords_)
                : nullptr;
  _impl_.targets_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::telemetry_proto::Point3D>(arena, *from._impl_.targets_)
                : nullptr;
  _impl_.on_condition_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::telemetry_proto::CompoundAxes>(arena, *from._impl_.on_condition_)
                : nullptr;
  _impl_.probe_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::telemetry_proto::CompoundAxes>(arena, *from._impl_.probe_)
                : nullptr;
  _impl_.stalled_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::telemetry_proto::IndividualAxes>(arena, *from._impl_.stalled_)
                : nullptr;
  _impl_.limits_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::telemetry_proto::Limits>(arena, *from._impl_.limits_)
                : nullptr;
  _impl_.temps_ = (cached_has_bits & 0x00000040u)
                ? CreateMaybeMessage<::telemetry_proto::Temps>(arena, *from._impl_.temps_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, control_enabled_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, control_enabled_),
           offsetof(Impl_, brakes_mode_) -
               offsetof(Impl_, control_enabled_) +
               sizeof(Impl_::brakes_mode_));

  // @@protoc_insertion_point(copy_constructor:telemetry_proto.Telemetry)
}
inline PROTOBUF_NDEBUG_INLINE Telemetry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Telemetry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, coords_),
           0,
           offsetof(Impl_, brakes_mode_) -
               offsetof(Impl_, coords_) +
               sizeof(Impl_::brakes_mode_));
}
Telemetry::~Telemetry() {
  // @@protoc_insertion_point(destructor:telemetry_proto.Telemetry)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Telemetry::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.coords_;
  delete _impl_.targets_;
  delete _impl_.on_condition_;
  delete _impl_.probe_;
  delete _impl_.stalled_;
  delete _impl_.limits_;
  delete _impl_.temps_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:telemetry_proto.Telemetry)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.coords_ != nullptr);
      _impl_.coords_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.targets_ != nullptr);
      _impl_.targets_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.on_condition_ != nullptr);
      _impl_.on_condition_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.probe_ != nullptr);
      _impl_.probe_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.stalled_ != nullptr);
      _impl_.stalled_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.limits_ != nullptr);
      _impl_.limits_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.temps_ != nullptr);
      _impl_.temps_->Clear();
    }
  }
  ::memset(&_impl_.control_enabled_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.brakes_mode_) -
      reinterpret_cast<char*>(&_impl_.control_enabled_)) + sizeof(_impl_.brakes_mode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Telemetry::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 7, 0, 2> Telemetry::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Telemetry, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    7,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Telemetry_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .telemetry_proto.Point3D coords = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.coords_)}},
    // .telemetry_proto.Point3D targets = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.targets_)}},
    // .telemetry_proto.CompoundAxes on_condition = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.on_condition_)}},
    // .telemetry_proto.CompoundAxes probe = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.probe_)}},
    // .telemetry_proto.IndividualAxes stalled = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.stalled_)}},
    // .telemetry_proto.Limits limits = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 5, 5, PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.limits_)}},
    // bool control_enabled = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Telemetry, _impl_.control_enabled_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.control_enabled_)}},
    // bool stall_control = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Telemetry, _impl_.stall_control_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.stall_control_)}},
    // int32 brakes_mode = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Telemetry, _impl_.brakes_mode_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.brakes_mode_)}},
    // bool probe_protected = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Telemetry, _impl_.probe_protected_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.probe_protected_)}},
    // .telemetry_proto.Temps temps = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 6, 6, PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.temps_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .telemetry_proto.Point3D coords = 1;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.coords_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .telemetry_proto.Point3D targets = 2;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.targets_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .telemetry_proto.CompoundAxes on_condition = 3;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.on_condition_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .telemetry_proto.CompoundAxes probe = 4;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.probe_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .telemetry_proto.IndividualAxes stalled = 5;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.stalled_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .telemetry_proto.Limits limits = 6;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.limits_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool control_enabled = 7;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.control_enabled_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool stall_control = 8;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.stall_control_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 brakes_mode = 9;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.brakes_mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool probe_protected = 10;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.probe_protected_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .telemetry_proto.Temps temps = 11;
    {PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.temps_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::telemetry_proto::Point3D>()},
    {::_pbi::TcParser::GetTable<::telemetry_proto::Point3D>()},
    {::_pbi::TcParser::GetTable<::telemetry_proto::CompoundAxes>()},
    {::_pbi::TcParser::GetTable<::telemetry_proto::CompoundAxes>()},
    {::_pbi::TcParser::GetTable<::telemetry_proto::IndividualAxes>()},
    {::_pbi::TcParser::GetTable<::telemetry_proto::Limits>()},
    {::_pbi::TcParser::GetTable<::telemetry_proto::Temps>()},
  }}, {{
  }},
};

::uint8_t* Telemetry::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry_proto.Telemetry)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .telemetry_proto.Point3D coords = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::coords(this),
        _Internal::coords(this).GetCachedSize(), target, stream);
  }

  // .telemetry_proto.Point3D targets = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::targets(this),
        _Internal::targets(this).GetCachedSize(), target, stream);
  }

  // .telemetry_proto.CompoundAxes on_condition = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::on_condition(this),
        _Internal::on_condition(this).GetCachedSize(), target, stream);
  }

  // .telemetry_proto.CompoundAxes probe = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::probe(this),
        _Internal::probe(this).GetCachedSize(), target, stream);
  }

  // .telemetry_proto.IndividualAxes stalled = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::stalled(this),
        _Internal::stalled(this).GetCachedSize(), target, stream);
  }

  // .telemetry_proto.Limits limits = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::limits(this),
        _Internal::limits(this).GetCachedSize(), target, stream);
  }

  // bool control_enabled = 7;
  if (this->_internal_control_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_control_enabled(), target);
  }

  // bool stall_control = 8;
  if (this->_internal_stall_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_stall_control(), target);
  }

  // int32 brakes_mode = 9;
  if (this->_internal_brakes_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_brakes_mode(), target);
  }

  // bool probe_protected = 10;
  if (this->_internal_probe_protected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_probe_protected(), target);
  }

  // .telemetry_proto.Temps temps = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::temps(this),
        _Internal::temps(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry_proto.Telemetry)
  return target;
}

::size_t Telemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:telemetry_proto.Telemetry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // .telemetry_proto.Point3D coords = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.coords_);
    }

    // .telemetry_proto.Point3D targets = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.targets_);
    }

    // .telemetry_proto.CompoundAxes on_condition = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.on_condition_);
    }

    // .telemetry_proto.CompoundAxes probe = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.probe_);
    }

    // .telemetry_proto.IndividualAxes stalled = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stalled_);
    }

    // .telemetry_proto.Limits limits = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.limits_);
    }

    // .telemetry_proto.Temps temps = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.temps_);
    }

  }
  // bool control_enabled = 7;
  if (this->_internal_control_enabled() != 0) {
    total_size += 2;
  }

  // bool stall_control = 8;
  if (this->_internal_stall_control() != 0) {
    total_size += 2;
  }

  // bool probe_protected = 10;
  if (this->_internal_probe_protected() != 0) {
    total_size += 2;
  }

  // int32 brakes_mode = 9;
  if (this->_internal_brakes_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_brakes_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Telemetry::_class_data_ = {
    Telemetry::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Telemetry::GetClassData() const {
  return &_class_data_;
}

void Telemetry::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Telemetry*>(&to_msg);
  auto& from = static_cast<const Telemetry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:telemetry_proto.Telemetry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_coords()->::telemetry_proto::Point3D::MergeFrom(
          from._internal_coords());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_targets()->::telemetry_proto::Point3D::MergeFrom(
          from._internal_targets());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_on_condition()->::telemetry_proto::CompoundAxes::MergeFrom(
          from._internal_on_condition());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_probe()->::telemetry_proto::CompoundAxes::MergeFrom(
          from._internal_probe());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_stalled()->::telemetry_proto::IndividualAxes::MergeFrom(
          from._internal_stalled());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_limits()->::telemetry_proto::Limits::MergeFrom(
          from._internal_limits());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_temps()->::telemetry_proto::Temps::MergeFrom(
          from._internal_temps());
    }
  }
  if (from._internal_control_enabled() != 0) {
    _this->_internal_set_control_enabled(from._internal_control_enabled());
  }
  if (from._internal_stall_control() != 0) {
    _this->_internal_set_stall_control(from._internal_stall_control());
  }
  if (from._internal_probe_protected() != 0) {
    _this->_internal_set_probe_protected(from._internal_probe_protected());
  }
  if (from._internal_brakes_mode() != 0) {
    _this->_internal_set_brakes_mode(from._internal_brakes_mode());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Telemetry::CopyFrom(const Telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:telemetry_proto.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Telemetry::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Telemetry::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Telemetry::InternalSwap(Telemetry* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.brakes_mode_)
      + sizeof(Telemetry::_impl_.brakes_mode_)
      - PROTOBUF_FIELD_OFFSET(Telemetry, _impl_.coords_)>(
          reinterpret_cast<char*>(&_impl_.coords_),
          reinterpret_cast<char*>(&other->_impl_.coords_));
}

::google::protobuf::Metadata Telemetry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_telemetry_2eproto_getter, &descriptor_table_telemetry_2eproto_once,
      file_level_metadata_telemetry_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace telemetry_proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
